{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kevin Tran\\\\Documents\\\\GitHub\\\\phishnet\\\\frontend\\\\src\\\\components\\\\EmailClassifier.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EmailClassifier() {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [result, setResult] = useState(null);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(\"http://127.0.0.1:5000/api/classify\", {\n        email\n      });\n      setResult(response.data);\n    } catch (error) {\n      console.error(\"Error classifying email:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"10\",\n        cols: \"50\",\n        placeholder: \"Paste your email body here...\",\n        value: email,\n        onChange: e => setEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Classify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Prediction: \", result.prediction]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Confidence: \", result.confidence]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_s(EmailClassifier, \"b7E99/eM3y14hEqBcQVw880+ygc=\");\n_c = EmailClassifier;\nexport default EmailClassifier;\nvar _c;\n$RefreshReg$(_c, \"EmailClassifier\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","EmailClassifier","_s","email","setEmail","result","setResult","handleSubmit","e","preventDefault","response","post","data","error","console","children","onSubmit","rows","cols","placeholder","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","type","prediction","confidence","_c","$RefreshReg$"],"sources":["C:/Users/Kevin Tran/Documents/GitHub/phishnet/frontend/src/components/EmailClassifier.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction EmailClassifier() {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [result, setResult] = useState(null);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post(\"http://127.0.0.1:5000/api/classify\", { email });\r\n      setResult(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error classifying email:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <textarea\r\n          rows=\"10\"\r\n          cols=\"50\"\r\n          placeholder=\"Paste your email body here...\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        ></textarea>\r\n        <br />\r\n        <button type=\"submit\">Classify</button>\r\n      </form>\r\n      {result && (\r\n        <div>\r\n          <h2>Prediction: {result.prediction}</h2>\r\n          <p>Confidence: {result.confidence}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmailClassifier;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMU,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAC,oCAAoC,EAAE;QAAER;MAAM,CAAC,CAAC;MAClFG,SAAS,CAACI,QAAQ,CAACE,IAAI,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EAED,oBACEb,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAMgB,QAAQ,EAAET,YAAa;MAAAQ,QAAA,gBAC3Bf,OAAA;QACEiB,IAAI,EAAC,IAAI;QACTC,IAAI,EAAC,IAAI;QACTC,WAAW,EAAC,+BAA+B;QAC3CC,KAAK,EAAEjB,KAAM;QACbkB,QAAQ,EAAGb,CAAC,IAAKJ,QAAQ,CAACI,CAAC,CAACc,MAAM,CAACF,KAAK;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC,eACZ1B,OAAA;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN1B,OAAA;QAAQ2B,IAAI,EAAC,QAAQ;QAAAZ,QAAA,EAAC;MAAQ;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,EACNrB,MAAM,iBACLL,OAAA;MAAAe,QAAA,gBACEf,OAAA;QAAAe,QAAA,GAAI,cAAY,EAACV,MAAM,CAACuB,UAAU;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACxC1B,OAAA;QAAAe,QAAA,GAAG,cAAY,EAACV,MAAM,CAACwB,UAAU;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACxB,EAAA,CAnCQD,eAAe;AAAA6B,EAAA,GAAf7B,eAAe;AAqCxB,eAAeA,eAAe;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}